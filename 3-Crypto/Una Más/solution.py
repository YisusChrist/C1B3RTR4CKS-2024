import random

# The given arr and s_arr values
arr = [
    12504412697777005645,
    12165138429639711349,
    15917805636437309093,
    6699899756927662928,
    4543665983627655683,
    17534845949275225575,
    1439894577512205368,
    11000242151702556767,
    8973032073245614343,
    13647608095811077696,
    2885835140719609024,
    17023033369184047559,
    14590171165714201382,
    16549568178572924320,
    17884224050965290954,
    13122144214719212372,
    2876906745658080127,
    14196068721871155132,
    4301347319748953264,
    3800593534250095011,
    7518880289742881342,
    5048637446253246807,
    630783144226940310,
    18195325101889153258,
    1260537297172987240,
    10355884850337540340,
    2170360039467503017,
    15807334844907975835,
    17640183111605735630,
    10348099552153515761,
    6823857966972129604,
    3529232583696987942,
    4551462723628812551,
    12609618359060133980,
    11573281658141896354,
    7747768120445524891,
    12911391369186101488,
    12928594828018673253,
    10588349918053898513,
    5819835191719372899,
    5876560449460189159,
]
s_arr = [
    32494069354203713610582,
    30246518341047751660790,
    32407774286831030085559,
    30406929480230576344450,
    30721960082818319923217,
    30533452428454705369521,
    33121715079032328074028,
    31649029123510452105640,
    33035009598382674595855,
    31493965282616848613739,
    31274403901393016008046,
    31246431230748588889299,
    32975875320582280375402,
    32293238615554104460390,
    31951032867621773989143,
    32679697448676895358997,
    32162742042340269352292,
    30091294624564585576522,
    31528236243302696309501,
    30576807792848635694283,
    31614909907884353714935,
    32227571127950673194898,
    30669004236542005965857,
    31151257449007943161939,
    31442954630039468498111,
    31397523660137594653151,
    30831564805855123263539,
    31542456684097895854923,
    31788294705678125894420,
    32418690441211425486865,
    30597045586552513355118,
    32796491106071751181191,
    30917729009916354379920,
    32267937399124807084081,
    32956526538658800039876,
    32378631399698802967202,
    30985780014633640552581,
    32449269015236891231428,
    31862536508354682445330,
    33328428441686547027281,
]

# Given the format of the flag
flag_format = "LetsCTF{"
flag_hex_len = 32

# Convert flag format to list of ASCII values
flag_ascii = [ord(c) for c in flag_format]

# Brute force to find the unknown part of the flag
unknown_len = flag_hex_len
hex_chars = "0123456789abcdef"

# Initialize the part of FLAG known
FLAG = "LetsCTF{" + "?" * unknown_len + "}"

# The initial arr
initial_arr = arr[:]


def rotate(arr):
    return [arr[-1]] + arr[:-1]


# Check if a possible flag matches the s_arr values
def check_possible_flag(possible_flag):
    arr = initial_arr[:]
    l = len(possible_flag)
    for i in range(len(s_arr)):
        s_i = sum([arr[j] * ord(possible_flag[j]) for j in range(l)])
        if s_i != s_arr[i]:
            return False
        arr = rotate(arr)
    return True


# Generate possible flags and check them
def find_flag(prefix):
    if len(prefix) == len(FLAG) - 1:
        possible_flag = prefix + "}"
        if check_possible_flag(possible_flag):
            return possible_flag
        return None
    for char in hex_chars:
        next_flag = prefix + char
        result = find_flag(next_flag)
        if result is not None:
            return result
    return None


# Start finding the flag
final_flag = find_flag(flag_format)

print("Flag:", final_flag)
